name: Debugging with Oh My Zsh

description: 'Debug your GitHub Actions Environment interactively by using SSH and Oh My Zsh'
author: 'Bruno Krebs'
branding:
  icon: 'terminal'

inputs:
  ngrok-auth-token:
    description: 'The Ngrok Auth Token'
    required: true
  ssh-timeout:
    description: 'The SSH timeout in seconds'
    required: false
    default: "300"

runs:
  using: 'composite'

  steps:
    - name: Install SSH Server, zsh, and ngrok
      shell: sh
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-server zsh
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xvzf ngrok-v3-stable-linux-amd64.tgz
        sudo mv ngrok /usr/local/bin/
        sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sudo service ssh start

    - name: Set up SSH user and password
      shell: sh
      run: |
        echo 'runner:password' | sudo chpasswd

    - name: Install oh-my-zsh
      shell: sh
      run: |
        sudo -u runner sh -c "cd /home/runner && curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh"

    - name: Set zsh as the default shell
      shell: sh
      run: |
        sudo chsh -s /bin/zsh runner

    - name: Generate compaudit list
      shell: sh
      run: |
        sudo -u runner /bin/zsh -c "autoload -Uz compaudit; compaudit" | grep -v 'There are insecure directories:' > /tmp/compaudit_list.txt

    - name: Fix permissions based on compaudit list
      shell: sh
      run: |
        sudo xargs -a /tmp/compaudit_list.txt chmod g-w
        sudo xargs -a /tmp/compaudit_list.txt chmod a-w

    - name: Append env_setup.sh to .zshrc
      shell: sh
      run: |
        echo "source /home/runner/env_setup.sh" | sudo tee -a /home/runner/.zshrc

    - name: Start Ngrok and monitor it for SSH connections
      env:
        NGROK_AUTH_TOKEN: ${{ inputs.ngrok-auth-token }}
        SSH_TIMEOUT: ${{ inputs.ssh-timeout }}
      shell: sh
      run: |
        # Start ngrok and keep it running
        ngrok authtoken $NGROK_AUTH_TOKEN
        ngrok tcp 22 --log=stdout > ngrok.log &
        sleep 10
        cat ngrok.log

        # Get the public URL
        NGROK_URL=$(curl --silent --max-time 10 http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "Connect via SSH using the following URL: $NGROK_URL"

        # Initialize connection tracking
        LAST_CONNECTION_TIME=$(date +%s)
        POLL_INTERVAL=15 # 15 seconds

        # timeout is $SSH_TIMEOUT or 5 minutes by default
        TIMEOUT=${SSH_TIMEOUT:-300}

        # Monitor the SSH connection
        while : ; do
          CURRENT_TIME=$(date +%s)
          CONNECTIONS=$(curl --silent http://127.0.0.1:4040/api/tunnels | jq '.tunnels[0].metrics.conns.gauge')
          if [ "$CONNECTIONS" -gt 0 ]; then
            echo "SSH connection detected. Resetting timeout."
            LAST_CONNECTION_TIME=$(date +%s) # Reset last connection time
          fi

          # if no connections print time elapsed since last connection
          if [ "$CONNECTIONS" -eq 0 ]; then
            echo "Connect via SSH using the following URL: $NGROK_URL"
            echo "No SSH connections detected in the last $((CURRENT_TIME - LAST_CONNECTION_TIME)) seconds."
          fi

          # Check if the timeout has been reached
          if [ $((CURRENT_TIME - LAST_CONNECTION_TIME)) -ge $TIMEOUT ]; then
            echo "No SSH connections detected within the last $TIMEOUT seconds. Exiting."
            exit 0
          fi

          sleep $POLL_INTERVAL
        done
